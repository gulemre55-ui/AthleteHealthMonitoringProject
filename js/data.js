// Sahte veri olu≈üturma fonksiyonlarƒ±

// Anlƒ±k nabƒ±z deƒüeri i√ßin rastgele veri √ºretici
function generateRandomBpm(playerId = 1) {
    // Sporcu ID'sine g√∂re baz nabƒ±z deƒüeri belirle
    const baseBpmByPlayer = {
        1: 72,  // Sporcu 1 - Normal
        2: 68,  // Sporcu 2 - Daha d√º≈ü√ºk
        3: 75,  // Sporcu 3 - Daha y√ºksek
        4: 70,  // Sporcu 4 - Normal-d√º≈ü√ºk
        5: 78,  // Sporcu 5 - Y√ºksek
        6: 65,  // Sporcu 6 - D√º≈ü√ºk
        7: 80,  // Sporcu 7 - √áok y√ºksek
        8: 73,  // Sporcu 8 - Normal
        9: 69,  // Sporcu 9 - Normal-d√º≈ü√ºk
        10: 76, // Sporcu 10 - Y√ºksek
        11: 71, 12: 74, 13: 67, 14: 79, 15: 66, 16: 81, 17: 69, 18: 75, 19: 68, 20: 77,
        21: 70, 22: 73, 23: 76, 24: 65, 25: 82, 26: 72, 27: 78, 28: 67, 29: 80, 30: 71,
        31: 74, 32: 69, 33: 75, 34: 68, 35: 79, 36: 66, 37: 81, 38: 73, 39: 77, 40: 70,
        41: 76, 42: 65, 43: 82, 44: 72, 45: 78, 46: 67, 47: 80, 48: 71, 49: 74, 50: 69
    };

    const baseBpm = baseBpmByPlayer[playerId] || 72; // Varsayƒ±lan
    const randomValue = Math.random();

    if (randomValue < 0.7) {
        // %70 olasƒ±lƒ±kla normal aralƒ±k (baz ¬±15)
        return Math.floor(Math.random() * 31) + (baseBpm - 15);
    } else if (randomValue < 0.9) {
        // %20 olasƒ±lƒ±kla d√º≈ü√ºk aralƒ±k (baz -20 ile baz -5 arasƒ±)
        return Math.floor(Math.random() * 16) + (baseBpm - 20);
    } else {
        // %10 olasƒ±lƒ±kla y√ºksek aralƒ±k (baz +5 ile baz +25 arasƒ±)
        return Math.floor(Math.random() * 21) + (baseBpm + 5);
    }
}

// Nabƒ±z durumu belirleyici
function getBpmStatus(bpm) {
    if (bpm < 60) {
        return "low";
    } else if (bpm > 100) {
        return "high";
    } else {
        return "normal";
    }
}

// Son 3 saat i√ßin veri √ºretici - Kaydƒ±rƒ±labilir sistem
function generateLast3HoursData() {
    const data = [];
    const now = new Date();
    
    // Son 3 saat i√ßin her 2 dakikada bir veri (toplam 90 veri noktasƒ±)
    const intervalMinutes = 2;
    const totalHours = 3;
    const totalDataPoints = (totalHours * 60) / intervalMinutes;
    
    for (let i = 0; i < totalDataPoints; i++) {
        // 3 saat √∂ncesinden ba≈ülayarak ≈üimdiye kadar
        const time = new Date(now.getTime() - ((totalDataPoints - 1 - i) * intervalMinutes * 60 * 1000));
        
        // Ger√ßek√ßi nabƒ±z paterni olu≈ütur
        const hour = time.getHours();
        let baseBpm;
        
        // G√ºn√ºn saatine g√∂re ger√ßek√ßi nabƒ±z deƒüerleri
        if (hour >= 22 || hour <= 6) {
            // Gece: Daha d√º≈ü√ºk nabƒ±z (50-70)
            baseBpm = 50 + Math.random() * 20;
        } else if (hour >= 7 && hour <= 9) {
            // Sabah: Orta seviye (65-85)
            baseBpm = 65 + Math.random() * 20;
        } else if (hour >= 10 && hour <= 17) {
            // G√ºnd√ºz: Aktif d√∂nem (70-95)
            baseBpm = 70 + Math.random() * 25;
        } else {
            // Ak≈üam: Dinlenme (60-80)
            baseBpm = 60 + Math.random() * 20;
        }
        
        // K√º√ß√ºk rastgele varyasyonlar ekle
        const variation = (Math.random() - 0.5) * 8;
        const bpm = Math.max(45, Math.min(130, Math.round(baseBpm + variation)));
        
        data.push({
            time: time.toISOString(),
            bpm: bpm
        });
    }
    
    return data;
}

// Tam g√ºnl√ºk veri i√ßin sahte veri √ºretici - Kaydƒ±rƒ±labilir sistem i√ßin
function generateDailyData() {
    const data = [];
    const now = new Date();
    
    // Bug√ºn√ºn ba≈üƒ±ndan (00:00) ≈üu ana kadar her 2 dakikada bir veri
    const startOfDay = new Date(now);
    startOfDay.setHours(0, 0, 0, 0);
    
    const intervalMinutes = 2;
    const currentTime = now.getTime();
    const startTime = startOfDay.getTime();
    const totalMinutes = Math.floor((currentTime - startTime) / (1000 * 60));
    const totalDataPoints = Math.floor(totalMinutes / intervalMinutes) + 1;
    
    for (let i = 0; i < totalDataPoints; i++) {
        const time = new Date(startTime + (i * intervalMinutes * 60 * 1000));
        
        // Ger√ßek√ßi g√ºnl√ºk nabƒ±z paterni olu≈ütur
        const hour = time.getHours();
        let baseBpm;
        
        // G√ºn√ºn saatine g√∂re ger√ßek√ßi nabƒ±z deƒüerleri
        if (hour >= 22 || hour <= 6) {
            // Gece: Daha d√º≈ü√ºk nabƒ±z (50-70)
            baseBpm = 50 + Math.random() * 20;
        } else if (hour >= 7 && hour <= 9) {
            // Sabah: Orta seviye (65-85)
            baseBpm = 65 + Math.random() * 20;
        } else if (hour >= 10 && hour <= 17) {
            // G√ºnd√ºz: Aktif d√∂nem (70-95)
            baseBpm = 70 + Math.random() * 25;
        } else {
            // Ak≈üam: Dinlenme (60-80)
            baseBpm = 60 + Math.random() * 20;
        }
        
        // K√º√ß√ºk rastgele varyasyonlar ekle
        const variation = (Math.random() - 0.5) * 8;
        const bpm = Math.max(45, Math.min(130, Math.round(baseBpm + variation)));
        
        data.push({
            time: time.toISOString(),
            bpm: bpm
        });
    }
    
    return data;
}

// Haftalƒ±k veri i√ßin sahte veri √ºretici
function generateWeeklyData(playerId = 1) {
    const data = [];
    const now = new Date();

    // Son 7 g√ºn i√ßin g√ºnl√ºk ortalama veri
    for (let i = 6; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);

        // G√ºnl√ºk ortalama i√ßin birka√ß √∂l√ß√ºm al
        let totalBpm = 0;
        const measurements = 8; // Her g√ºn i√ßin 8 √∂l√ß√ºm

        for (let j = 0; j < measurements; j++) {
            totalBpm += generateRandomBpm(playerId);
        }

        const avgBpm = Math.round(totalBpm / measurements);

        data.push({
            date: date.toISOString().split('T')[0], // Sadece tarih kƒ±smƒ±
            day: getDayName(date.getDay()),
            avgBpm: avgBpm
        });
    }

    return data;
}

// Aylƒ±k veri i√ßin sahte veri √ºretici
function generateMonthlyData(playerId = 1) {
    const data = [];
    const now = new Date();
    const currentDay = now.getDate();

    // Bu ayƒ±n 1. g√ºn√ºnden bug√ºne kadar g√ºnl√ºk ortalama veri
    for (let i = 1; i <= currentDay; i++) {
        const date = new Date(now.getFullYear(), now.getMonth(), i);

        // G√ºnl√ºk ortalama i√ßin birka√ß √∂l√ß√ºm al
        let totalBpm = 0;
        const measurements = 6; // Her g√ºn i√ßin 6 √∂l√ß√ºm

        for (let j = 0; j < measurements; j++) {
            totalBpm += generateRandomBpm(playerId);
        }

        const avgBpm = Math.round(totalBpm / measurements);

        data.push({
            date: date.toISOString().split('T')[0],
            day: i,
            dayName: getDayName(date.getDay()),
            monthName: getMonthName(date.getMonth()),
            avgBpm: avgBpm
        });
    }

    return data;
}

// Yƒ±llƒ±k veri i√ßin sahte veri √ºretici
function generateYearlyData(playerId = 1) {
    const data = [];
    const now = new Date();
    const currentMonth = now.getMonth();

    // Bu yƒ±lƒ±n Ocak ayƒ±ndan bu aya kadar aylƒ±k ortalama veri
    for (let i = 0; i <= currentMonth; i++) {
        const date = new Date(now.getFullYear(), i, 1);

        // Aylƒ±k ortalama i√ßin birka√ß √∂l√ß√ºm al
        let totalBpm = 0;
        const measurements = 15; // Her ay i√ßin 15 √∂l√ß√ºm

        for (let j = 0; j < measurements; j++) {
            totalBpm += generateRandomBpm(playerId);
        }

        const avgBpm = Math.round(totalBpm / measurements);

        data.push({
            month: getMonthName(i),
            date: date.toISOString().split('T')[0],
            avgBpm: avgBpm
        });
    }

    console.log('‚úÖ DEBUG: generateYearlyData tamamlandƒ±, veri sayƒ±sƒ±:', data.length);
    return data;
}

// Yardƒ±mcƒ± fonksiyonlar
function getDayName(dayIndex) {
    const days = ['Pazar', 'Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi'];
    return days[dayIndex];
}

function getMonthName(monthIndex) {
    const months = [
        'Ocak', '≈ûubat', 'Mart', 'Nisan', 'Mayƒ±s', 'Haziran',
        'Temmuz', 'Aƒüustos', 'Eyl√ºl', 'Ekim', 'Kasƒ±m', 'Aralƒ±k'
    ];
    return months[monthIndex];
}

// Belirli bir tarih i√ßin ger√ßek√ßi veri √ºretici (tam g√ºn g√∂r√ºn√ºm√º + kesintili veri)
function generateDataForDate(selectedDate, intervalMinutes = 10, playerId = 1) {
    console.log('üîç DEBUG: generateDataForDate √ßaƒürƒ±ldƒ±, tarih:', selectedDate, 'interval:', intervalMinutes, 'playerId:', playerId);
    const data = [];
    const baseDate = new Date(selectedDate);

    // 00:00'dan 24:00'e kadar her saat i√ßin kontrol et
    for (let hour = 0; hour < 24; hour++) {
        // Her saat i√ßin %75 ≈üansla veri √ºret (yani %25 ≈üansla o saat hi√ß veri yok)
        if (Math.random() < 0.75) {
            // Bu saatte veri √ºret
            const hourData = generateDataForHour(baseDate, hour, intervalMinutes, playerId);
            data.push(...hourData);
        } else {
            console.log(`üîç DEBUG: Saat ${hour}:00 i√ßin veri √ºretilmeyecek (cihaz takƒ±lƒ± deƒüil)`);
            // Veri olmayan saat i√ßin de zaman damgasƒ± ekle (grafikte bo≈ü g√∂r√ºns√ºn)
            const emptyHourTime = new Date(baseDate);
            emptyHourTime.setHours(hour, 0, 0, 0);
            data.push({
                time: emptyHourTime.toISOString(),
                bpm: null // Chart.js null deƒüerleri bo≈ü g√∂sterir
            });
        }
    }

    // Veriyi zamana g√∂re sƒ±rala
    data.sort((a, b) => new Date(a.time) - new Date(b.time));

    console.log('üîç DEBUG: Toplam veri noktasƒ±:', data.length);
    return data;
}

// Belirli bir saat i√ßin veri √ºret
function generateDataForHour(baseDate, hour, intervalMinutes, playerId = 1) {
    const data = [];
    const startTime = new Date(baseDate);
    startTime.setHours(hour, 0, 0, 0);

    const endTime = new Date(baseDate);
    endTime.setHours(hour + 1, 0, 0, 0);

    const totalMinutes = (endTime.getTime() - startTime.getTime()) / (1000 * 60);
    const totalDataPoints = Math.floor(totalMinutes / intervalMinutes) + 1;

    for (let i = 0; i < totalDataPoints; i++) {
        const time = new Date(startTime.getTime() + (i * intervalMinutes * 60 * 1000));

        // Sporcu bazlƒ± nabƒ±z deƒüeri √ºret
        const bpm = generateRandomBpm(playerId);

        data.push({
            time: time.toISOString(),
            bpm: bpm
        });
    }

    return data;
}

// Veri dizisinden null deƒüerleri temizle (Chart.js i√ßin)
function cleanDataForChart(rawData) {
    return rawData.filter(item => item.bpm !== null);
}

// Bug√ºn√ºn 00:00'ƒ±ndan ≈üu ana kadar olan ger√ßek√ßi veri √ºretici (kesintili)
function generateFrom8AMToNowData(intervalMinutes = 10, playerId = 1) {
    console.log('üîç DEBUG: generateFrom8AMToNowData √ßaƒürƒ±ldƒ±, interval:', intervalMinutes, 'playerId:', playerId);
    const data = [];
    const now = new Date();
    const currentHour = now.getHours();
    console.log('üîç DEBUG: ≈ûu anki zaman:', now.toISOString(), 'aktif saat:', currentHour);

    // Bug√ºn√ºn 00:00'ƒ±nƒ± ba≈ülangƒ±√ß olarak al
    const baseDate = new Date(now);
    baseDate.setHours(0, 0, 0, 0);

    // 00:00'dan aktif saate kadar her saat i√ßin kontrol et
    for (let hour = 0; hour <= currentHour; hour++) {
        // Her saat i√ßin %80 ≈üansla veri √ºret (yani %20 ≈üansla o saat hi√ß veri yok)
        if (Math.random() < 0.80) {
            // Bu saatte veri √ºret
            const hourData = generateDataForHour(baseDate, hour, intervalMinutes, playerId);
            data.push(...hourData);
        } else {
            console.log(`üîç DEBUG: Bug√ºn saat ${hour}:00 i√ßin veri √ºretilmeyecek (cihaz √ßƒ±karƒ±ldƒ±)`);
            // Veri olmayan saat i√ßin de zaman damgasƒ± ekle (grafikte bo≈ü g√∂r√ºns√ºn)
            const emptyHourTime = new Date(baseDate);
            emptyHourTime.setHours(hour, 0, 0, 0);
            data.push({
                time: emptyHourTime.toISOString(),
                bpm: null // Chart.js null deƒüerleri bo≈ü g√∂sterir
            });
        }
    }

    // Veriyi zamana g√∂re sƒ±rala
    data.sort((a, b) => new Date(a.time) - new Date(b.time));

    console.log('üîç DEBUG: Bug√ºn i√ßin toplam veri noktasƒ±:', data.length);
    return data;
}

// Bug√ºn√ºn t√ºm g√ºn√ºn√ºn verisini √ºret (00:00'den itibaren)
function generateTodayFullData(intervalMinutes = 10) {
    const data = [];
    const now = new Date();

    // Bug√ºn√ºn 00:00'ƒ±nƒ± ba≈ülangƒ±√ß olarak al
    const startTime = new Date(now);
    startTime.setHours(0, 0, 0, 0);

    // Bug√ºn√ºn 23:59'unu biti≈ü olarak al
    const endTime = new Date(now);
    endTime.setHours(23, 59, 0, 0);

    const totalMinutes = Math.floor((endTime.getTime() - startTime.getTime()) / (1000 * 60));
    const totalDataPoints = Math.floor(totalMinutes / intervalMinutes) + 1;

    // Veri sayƒ±sƒ± √ßok fazla ise aralƒ±ƒüƒ± artƒ±r (max 150 veri noktasƒ±)
    const maxDataPoints = 150;
    if (totalDataPoints > maxDataPoints) {
        const newInterval = Math.ceil(totalMinutes / maxDataPoints);
        return generateTodayFullData(newInterval);
    }

    for (let i = 0; i < totalDataPoints; i++) {
        const time = new Date(startTime.getTime() + (i * intervalMinutes * 60 * 1000));

        // Ger√ßek√ßi nabƒ±z paterni olu≈ütur
        const hour = time.getHours();
        let baseBpm;

        // G√ºn√ºn saatine g√∂re ger√ßek√ßi nabƒ±z deƒüerleri
        if (hour >= 22 || hour <= 6) {
            // Gece: Daha d√º≈ü√ºk nabƒ±z (50-70)
            baseBpm = 50 + Math.random() * 20;
        } else if (hour >= 7 && hour <= 9) {
            // Sabah: Orta seviye (65-85)
            baseBpm = 65 + Math.random() * 20;
        } else if (hour >= 10 && hour <= 17) {
            // G√ºnd√ºz: Aktif d√∂nem (70-95)
            baseBpm = 70 + Math.random() * 25;
        } else {
            // Ak≈üam: Dinlenme (60-80)
            baseBpm = 60 + Math.random() * 20;
        }

        // K√º√ß√ºk rastgele varyasyonlar ekle
        const variation = (Math.random() - 0.5) * 8;
        const bpm = Math.max(45, Math.min(130, Math.round(baseBpm + variation)));

        data.push({
            time: time.toISOString(),
            bpm: bpm
        });
    }

    return data;
}

// SVG Avatar olu≈üturma fonksiyonu
function createAvatarSVG(initials, bgColor, textColor) {
    // T√ºrk√ße karakterleri de dahil et
    const cleanInitials = initials.replace(/[^A-Za-z√á√ßƒûƒüƒ∞ƒ±√ñ√∂≈û≈ü√ú√º]/g, '').substring(0, 2).toUpperCase();

    // Basit SVG olu≈ütur - daha k√º√ß√ºk font ile
    const svgContent = `<svg width="50" height="50" viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg"><circle cx="25" cy="25" r="25" fill="${bgColor}"/><text x="25" y="30" font-size="12" font-weight="bold" text-anchor="middle" fill="${textColor}">${cleanInitials}</text></svg>`;

    return `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(svgContent)}`;
}

// Sporcu listesi - Detaylƒ± bilgilerle
const players = [
    {
        id: 1,
        name: "Ahmet Yƒ±lmaz",
        age: 25,
        weight: 75,
        position: "Orta Saha",
        avatar: createAvatarSVG("AY", "#3b82f6", "#ffffff")
    },
    {
        id: 2,
        name: "Mehmet Kaya",
        age: 28,
        weight: 82,
        position: "Defans",
        avatar: createAvatarSVG("MK", "#1d4ed8", "#ffffff")
    },
    {
        id: 3,
        name: "Caner Erkin",
        age: 22,
        weight: 68,
        position: "Forvet",
        avatar: createAvatarSVG("CE", "#ff6b6b", "#ffffff")
    },
    {
        id: 4,
        name: "Burak √ñzkan",
        age: 30,
        weight: 78,
        position: "Kaleci",
        avatar: createAvatarSVG("BO", "#4d96ff", "#ffffff")
    },
    {
        id: 5,
        name: "Emre Demir",
        age: 24,
        weight: 72,
        position: "Orta Saha",
        avatar: createAvatarSVG("ED", "#ff9f43", "#0a192f")
    },
    {
        id: 6,
        name: "Ali Yƒ±ldƒ±z",
        age: 26,
        weight: 80,
        position: "Defans",
        avatar: createAvatarSVG("AY", "#a29bfe", "#0a192f")
    },
    {
        id: 7,
        name: "Mustafa √áelik",
        age: 29,
        weight: 85,
        position: "Forvet",
        avatar: createAvatarSVG("M√á", "#fd79a8", "#0a192f")
    },
    {
        id: 8,
        name: "Hakan ≈ûahin",
        age: 27,
        weight: 76,
        position: "Orta Saha",
        avatar: createAvatarSVG("H≈û", "#00b894", "#ffffff")
    },
    {
        id: 9,
        name: "√ñmer Ko√ß",
        age: 23,
        weight: 70,
        position: "Forvet",
        avatar: createAvatarSVG("√ñK", "#e17055", "#ffffff")
    },
    {
        id: 10,
        name: "Kemal Aydƒ±n",
        age: 31,
        weight: 83,
        position: "Defans",
        avatar: createAvatarSVG("KA", "#6c5ce7", "#ffffff")
    },
    {
        id: 11,
        name: "Serkan Yƒ±ldƒ±rƒ±m",
        age: 26,
        weight: 79,
        position: "Orta Saha",
        avatar: createAvatarSVG("SY", "#ff7675", "#ffffff")
    },
    {
        id: 12,
        name: "Tolga Akƒ±n",
        age: 29,
        weight: 81,
        position: "Forvet",
        avatar: createAvatarSVG("TA", "#74b9ff", "#ffffff")
    },
    {
        id: 13,
        name: "Uƒüurcan √áetin",
        age: 24,
        weight: 77,
        position: "Kaleci",
        avatar: createAvatarSVG("U√á", "#a29bfe", "#ffffff")
    },
    {
        id: 14,
        name: "Barƒ±≈ü Alper",
        age: 27,
        weight: 74,
        position: "Defans",
        avatar: createAvatarSVG("BA", "#fdcb6e", "#0a192f")
    },
    {
        id: 15,
        name: "Furkan Korkmaz",
        age: 23,
        weight: 71,
        position: "Orta Saha",
        avatar: createAvatarSVG("FK", "#e17055", "#ffffff")
    },
    {
        id: 16,
        name: "Mert G√ºnok",
        age: 30,
        weight: 84,
        position: "Kaleci",
        avatar: createAvatarSVG("MG", "#00b894", "#ffffff")
    },
    {
        id: 17,
        name: "Cengiz √únder",
        age: 25,
        weight: 73,
        position: "Forvet",
        avatar: createAvatarSVG("C√ú", "#6c5ce7", "#ffffff")
    },
    {
        id: 18,
        name: "Okay Yoku≈ülu",
        age: 28,
        weight: 80,
        position: "Orta Saha",
        avatar: createAvatarSVG("OY", "#fd79a8", "#ffffff")
    },
    {
        id: 19,
        name: "√áaƒülar S√∂y√ºnc√º",
        age: 26,
        weight: 82,
        position: "Defans",
        avatar: createAvatarSVG("√áS", "#e84393", "#ffffff")
    },
    {
        id: 20,
        name: "Hakan √áalhanoƒülu",
        age: 29,
        weight: 76,
        position: "Orta Saha",
        avatar: createAvatarSVG("H√á", "#0984e3", "#ffffff")
    },
    {
        id: 21,
        name: "Burak Yƒ±lmaz",
        age: 37,
        weight: 87,
        position: "Forvet",
        avatar: createAvatarSVG("BY", "#d63031", "#ffffff")
    },
    {
        id: 22,
        name: "Arda Turan",
        age: 36,
        weight: 78,
        position: "Orta Saha",
        avatar: createAvatarSVG("AT", "#00cec9", "#ffffff")
    },
    {
        id: 23,
        name: "Sel√ßuk ƒ∞nan",
        age: 38,
        weight: 79,
        position: "Orta Saha",
        avatar: createAvatarSVG("Sƒ∞", "#e17055", "#ffffff")
    },
    {
        id: 24,
        name: "G√∂khan G√∂n√ºl",
        age: 39,
        weight: 75,
        position: "Defans",
        avatar: createAvatarSVG("GG", "#fdcb6e", "#0a192f")
    },
    {
        id: 25,
        name: "Volkan Demirel",
        age: 42,
        weight: 88,
        position: "Kaleci",
        avatar: createAvatarSVG("VD", "#a29bfe", "#ffffff")
    },
    {
        id: 26,
        name: "Semih Kaya",
        age: 32,
        weight: 85,
        position: "Defans",
        avatar: createAvatarSVG("SK", "#00b894", "#ffffff")
    },
    {
        id: 27,
        name: "Ozan Tufan",
        age: 28,
        weight: 74,
        position: "Orta Saha",
        avatar: createAvatarSVG("OT", "#6c5ce7", "#ffffff")
    },
    {
        id: 28,
        name: "Cenk Tosun",
        age: 32,
        weight: 83,
        position: "Forvet",
        avatar: createAvatarSVG("CT", "#fd79a8", "#ffffff")
    },
    {
        id: 29,
        name: "Hasan Ali Kaldƒ±rƒ±m",
        age: 33,
        weight: 78,
        position: "Defans",
        avatar: createAvatarSVG("HK", "#e84393", "#ffffff")
    },
    {
        id: 30,
        name: "Yunus Mallƒ±",
        age: 31,
        weight: 75,
        position: "Orta Saha",
        avatar: createAvatarSVG("YM", "#0984e3", "#ffffff")
    },
    {
        id: 31,
        name: "Nihat Kahveci",
        age: 33,
        weight: 72,
        position: "Orta Saha",
        avatar: createAvatarSVG("NK", "#d63031", "#ffffff")
    },
    {
        id: 32,
        name: "Emre Bel√∂zoƒülu",
        age: 43,
        weight: 76,
        position: "Orta Saha",
        avatar: createAvatarSVG("EB", "#00cec9", "#ffffff")
    },
    {
        id: 33,
        name: "Arda G√ºler",
        age: 18,
        weight: 68,
        position: "Orta Saha",
        avatar: createAvatarSVG("AG", "#e17055", "#ffffff")
    },
    {
        id: 34,
        name: "Kerem Akt√ºrkoƒülu",
        age: 24,
        weight: 70,
        position: "Forvet",
        avatar: createAvatarSVG("KA", "#fdcb6e", "#0a192f")
    },
    {
        id: 35,
        name: "Enes √únal",
        age: 26,
        weight: 78,
        position: "Forvet",
        avatar: createAvatarSVG("E√ú", "#a29bfe", "#ffffff")
    },
    {
        id: 36,
        name: "Orkun K√∂k√ß√º",
        age: 22,
        weight: 73,
        position: "Orta Saha",
        avatar: createAvatarSVG("OK", "#00b894", "#ffffff")
    },
    {
        id: 37,
        name: "ƒ∞rfan Can Kahveci",
        age: 27,
        weight: 71,
        position: "Orta Saha",
        avatar: createAvatarSVG("ƒ∞K", "#6c5ce7", "#ffffff")
    },
    {
        id: 38,
        name: "Abd√ºlkadir √ñm√ºr",
        age: 24,
        weight: 69,
        position: "Orta Saha",
        avatar: createAvatarSVG("A√ñ", "#fd79a8", "#ffffff")
    },
    {
        id: 39,
        name: "Dorukhan Tok√∂z",
        age: 27,
        weight: 74,
        position: "Orta Saha",
        avatar: createAvatarSVG("DT", "#e84393", "#ffffff")
    },
    {
        id: 40,
        name: "Umut Bozok",
        age: 27,
        weight: 79,
        position: "Forvet",
        avatar: createAvatarSVG("UB", "#0984e3", "#ffffff")
    },
    {
        id: 41,
        name: "Kenan Karaman",
        age: 29,
        weight: 77,
        position: "Forvet",
        avatar: createAvatarSVG("KK", "#d63031", "#ffffff")
    },
    {
        id: 42,
        name: "Halil Dervi≈üoƒülu",
        age: 23,
        weight: 75,
        position: "Forvet",
        avatar: createAvatarSVG("HD", "#00cec9", "#ffffff")
    },
    {
        id: 43,
        name: "Efecan Karaca",
        age: 23,
        weight: 72,
        position: "Orta Saha",
        avatar: createAvatarSVG("EK", "#e17055", "#ffffff")
    },
    {
        id: 44,
        name: "ƒ∞smail Y√ºksek",
        age: 24,
        weight: 76,
        position: "Orta Saha",
        avatar: createAvatarSVG("ƒ∞Y", "#fdcb6e", "#0a192f")
    },
    {
        id: 45,
        name: "Salih √ñzcan",
        age: 25,
        weight: 80,
        position: "Orta Saha",
        avatar: createAvatarSVG("S√ñ", "#a29bfe", "#ffffff")
    },
    {
        id: 46,
        name: "Kaan Ayhan",
        age: 28,
        weight: 84,
        position: "Defans",
        avatar: createAvatarSVG("KA", "#00b894", "#ffffff")
    },
    {
        id: 47,
        name: "Zeki √áelik",
        age: 26,
        weight: 78,
        position: "Defans",
        avatar: createAvatarSVG("Z√á", "#6c5ce7", "#ffffff")
    },
    {
        id: 48,
        name: "Mert M√ºld√ºr",
        age: 24,
        weight: 76,
        position: "Defans",
        avatar: createAvatarSVG("MM", "#fd79a8", "#ffffff")
    },
    {
        id: 49,
        name: "Rƒ±dvan Yƒ±lmaz",
        age: 22,
        weight: 74,
        position: "Defans",
        avatar: createAvatarSVG("RY", "#e84393", "#ffffff")
    },
    {
        id: 50,
        name: "Altay Bayƒ±ndƒ±r",
        age: 25,
        weight: 82,
        position: "Kaleci",
        avatar: createAvatarSVG("AB", "#0984e3", "#ffffff")
    }
];

// DEBUG: Mevcut sporcu sayƒ±sƒ±nƒ± logla
console.log('üîç DEBUG: Mevcut sporcu sayƒ±sƒ±:', players.length);
console.log('üîç DEBUG: Sporcu ID\'ler:', players.map(p => p.id));

// √áoklu sporcu i√ßin ayrƒ± √ßizgiler - veri birle≈ütirme fonksiyonlarƒ±
function generateMultiPlayerData(dataFunction, playerIds, ...args) {
    if (playerIds.length === 1) {
        // Tek sporcu i√ßin normal fonksiyonu √ßaƒüƒ±r
        return dataFunction(...args, playerIds[0]);
    }

    // √áoklu sporcu i√ßin her sporcu ayrƒ± veri d√∂nd√ºr
    const playerData = playerIds.map(playerId => ({
        playerId: playerId,
        playerData: dataFunction(...args, playerId)
    }));

    return playerData;
}

// √áoklu sporcu i√ßin wrapper fonksiyonlar
function generateMultiPlayerFrom8AMToNowData(playerIds, intervalMinutes = 10) {
    return generateMultiPlayerData(generateFrom8AMToNowData, playerIds, intervalMinutes);
}

function generateMultiPlayerDataForDate(playerIds, selectedDate, intervalMinutes = 10) {
    return generateMultiPlayerData(generateDataForDate, playerIds, selectedDate, intervalMinutes);
}

function generateMultiPlayerWeeklyData(playerIds) {
    return generateMultiPlayerData(generateWeeklyData, playerIds);
}

function generateMultiPlayerMonthlyData(playerIds) {
    return generateMultiPlayerData(generateMonthlyData, playerIds);
}

function generateMultiPlayerYearlyData(playerIds) {
    return generateMultiPlayerData(generateYearlyData, playerIds);
}

// Veri olu≈üturma fonksiyonlarƒ±nƒ± dƒ±≈üa aktar
window.HeartRateData = {
    generateRandomBpm,
    getBpmStatus,
    generateLast3HoursData,
    generateFrom8AMToNowData,
    generateTodayFullData,
    generateDataForDate,
    generateDailyData,
    generateWeeklyData,
    generateMonthlyData,
    generateYearlyData,
    // √áoklu sporcu fonksiyonlarƒ±
    generateMultiPlayerFrom8AMToNowData,
    generateMultiPlayerDataForDate,
    generateMultiPlayerWeeklyData,
    generateMultiPlayerMonthlyData,
    generateMultiPlayerYearlyData,
    players
};